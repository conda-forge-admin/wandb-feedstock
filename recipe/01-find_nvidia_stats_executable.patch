diff --git a/nvidia_gpu_stats/hatch.py b/nvidia_gpu_stats/hatch.py
index 0996ba621..1dd8a847c 100644
--- a/nvidia_gpu_stats/hatch.py
+++ b/nvidia_gpu_stats/hatch.py
@@ -1,5 +1,5 @@
 """Builds the nvidia_gpu_stats binary for monitoring NVIDIA GPUs."""
-
+import json
 import pathlib
 import subprocess

@@ -10,7 +10,7 @@ class NvidiaGpuStatsBuildError(Exception):

 def build_nvidia_gpu_stats(
     cargo_binary: pathlib.Path,
-    output_path: pathlib.PurePath,
+    output_path: pathlib.Path,
 ) -> None:
     """Builds the `nvidia_gpu_stats` Rust binary for monitoring NVIDIA GPUs.

@@ -23,16 +23,17 @@ def build_nvidia_gpu_stats(
         output_path: The path where to output the binary, relative to the
             workspace root.
     """
-    source_path = pathlib.Path("./nvidia_gpu_stats")
+    rust_pkg_root = pathlib.Path("./nvidia_gpu_stats")

     cmd = (
         str(cargo_binary),
         "build",
         "--release",
+        "--message-format=json",
     )

     try:
-        subprocess.check_call(cmd, cwd=source_path)
+        cargo_artifacts = subprocess.check_output(cmd, cwd=rust_pkg_root)
     except subprocess.CalledProcessError as e:
         raise NvidiaGpuStatsBuildError(
             "Failed to build the `nvidia_gpu_stats` Rust binary. If you didn't"
@@ -44,7 +45,14 @@ def build_nvidia_gpu_stats(
             " package that doesn't collect NVIDIA GPU metrics."
         ) from e

+    built_binary_path = _path_to_binary(cargo_artifacts=cargo_artifacts.splitlines())
+
     output_path.parent.mkdir(parents=True, exist_ok=True)
-    source_path = source_path / "target" / "release" / "nvidia_gpu_stats"
-    source_path.replace(output_path)
+    built_binary_path.replace(output_path)
     output_path.chmod(0o755)
+
+def _path_to_binary(cargo_artifacts: list) -> pathlib.Path:
+    """Returns the path to the nvidia_gpu_stats binary from cargo output."""
+    for package_artifact in cargo_artifacts:
+        if (exec:=json.loads(package_artifact).get("executable")):
+            return pathlib.Path(exec)
